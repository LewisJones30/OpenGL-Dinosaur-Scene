#version 460

in vec3 Position;
in vec3 Normal;
in vec2 TexCoord;
layout (location = 0) out vec4 FragColor;
layout (binding = 0) uniform sampler2D Tex1;
uniform vec4 LightPosition;
uniform vec3 Kd;
uniform vec3 Ld;

uniform struct LightInfo{
vec4 Position;
vec3 La;
vec3 L;
} lights[1];

uniform struct MaterialInfo{
vec3 Ka;
vec3 Kd;
vec3 Ks;
float Shininess;
} Material;
vec3 phongModel(vec3 position, vec3 normal)
{
vec3 texColor = texture(Tex1, TexCoord).rgb;
vec3 ambient = texColor;
vec3 s = normalize(vec3(lights[0].Position) - position);
float sDotN = dot(s,normal);
vec3 diffuse = texColor * sDotN;
vec3 spec = vec3(0.0);
if (sDotN > 0.0)
{
vec3 v = normalize(-position.xyz);
vec3 h = normalize(v + s);
spec = Material.Ks * pow(max(dot(h,normal),0.0), Material.Shininess);
}
return ambient + lights[0].L * (diffuse + spec);
}

void main() {
    FragColor = vec4(phongModel(Position, Normal), 1.0f);
}

