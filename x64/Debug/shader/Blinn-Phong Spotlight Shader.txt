#version 460

in vec3 Position;
in vec3 Normal;
layout (location = 0) out vec4 FragColor;


uniform struct SpotLightInfo
{
vec3 Position;
vec3 L;
vec3 La;
vec3 Direction;
float Exponent;
float Cutoff;
} Spot;

uniform struct MaterialInfo{
vec3 Ka;
vec3 Kd;
vec3 Ks;
float Shininess;
} Material;


vec3 blinnphongSpot(vec3 position, vec3 normal)
{
vec3 ambient = Spot.La * Material.Ka;
vec3 s = normalize(vec3(Spot.Position) - position);
float cosAng = dot(-s, normalize(Spot.Direction));
float angle = acos(cosAng);
float spotScale = 0.0;
vec3 diffuse = vec3(0.0);
vec3 spec = vec3(0.0);
if (angle < Spot.Cutoff)
{
    spotScale = pow(cosAng, Spot.Exponent);
    float sDotN = dot(s, normal);
    vec3 diffuse = Material.Kd * sDotN;

    if (sDotN > 0.0)
    {
    vec3 v = normalize(-position.xyz);
    vec3 h = normalize(v + s);
    spec = Material.Ks * pow(max(dot(h,normal),0.0), Material.Shininess);

    }
    return ambient + spotScale * Spot.L * (diffuse + spec);
    }
return ambient + spotScale * Spot.L * (diffuse + spec);
}

void main() {
    FragColor = vec4(blinnphongSpot(Position, normalize(Normal)), 1);
}



