#version 460

layout (location = 0) in vec3 VertexPosition;
layout (location = 1) in vec3 VertexNormal;

out vec3 Color;
uniform vec4 LightPosition;
uniform vec3 Kd;
uniform vec3 Ld;
uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;
uniform mat4 MVP;
uniform vec3 camCoords;
uniform struct LightInfo{
vec4 Position;
vec3 La;
vec3 L;
} lights[3];



uniform struct MaterialInfo{
vec3 Ka;
vec3 Kd;
vec3 Ks;
float Shininess;
} Material;


vec3 phongModel(int light, vec3 position, vec3 n)
{
vec3 ambient = lights[light].La;
vec3 s = normalize(vec3(lights[light].Position) - position);
float sDotN = dot(s,n);
vec3 diffuse = Material.Kd * sDotN;
vec3 spec = vec3(0.0);
if (sDotN > 0.0)
{
vec3 v = normalize(-position.xyz);
vec3 r = reflect(-s, n);
spec = Material.Ks * pow(max(dot(r,v), 0.0), Material.Shininess);
}
return ambient + lights[light].L * (diffuse + spec);
}



void main()
{
vec3 n = normalize(NormalMatrix * VertexNormal);
vec4 p = ModelViewMatrix * vec4(VertexPosition, 1.0);
Color = vec3(0.0);
for (int i = 0; i < 3; i++)
{
	Color += phongModel(i, camCoords, n); 
}
gl_Position = MVP * vec4(VertexPosition,1.0);
}
